March 28 Assignments
1  WAP for searching a number using binary search. Return the index of the num if exists else return 

package search.java;
public class binarySearch {
public static void main(String[] args) {
int []a = {1,2,3,34,56,66,78,89};
int key=144;
int Search=binarySearch(a,key);
    System.out.println(Search);  
   
	}

	private static int binarySearch(int[] a, int key) {
		
		int start=0;
		int end=a.length-1;
		while(start<=end) {
			int mid=(start+end)/2;
			
			 if(a[mid]>key ) {
			 end= mid-1;
				}
			 else if(a[mid]==key) {
					return mid;
					
				}
			else {
			start= mid+1;
			}
			
		}
		
	return -1;
	}
}
-------- ---------------------------------------------------------------
2 Find the cube root of a number using binary search
package search.java;

public class cubeRoot {

	public static void main(String[] args) {
		int num=100;
		int cubeRoot=FindCubeRoot(num);
		System.out.println(Math.cbrt(num));
		

	}

	private static int FindCubeRoot(int num) {
		int start=0;
		int end =num;
		int ans;
		while(start<num) {
			int mid=(start+end)/2;
			int cube=mid*mid*mid;
			if(cube==num) {
				return mid;
			
		 }
		
			else if(cube<num) {
				end=mid-1;
			ans=mid;
			}
			  
			else{
				start=mid+1;
				
			}
			}
		return 1;
	}

}
---------------------------------------------------------------------------
3. Find the intersection elements of two sorted arrays
A[] = { 3,6,8}   B[] ={1,2,3,5,6,90,789}
Output = 3,6"
package search.java;

public class intersection {
	public static void main(String[]args) {
	int[]a = {3,6,8}  ;
	int[] b={1,2,3,5,6,90,789};
		for(int i=0;i<a.length;i++) {
			for(int j=0;j<b.length;j++) {
				if(a[i]==b[j]) {
					System.out.println(a[i]);
					}
				}
			}
		}
	}
-----	--------------------------------------------------------
march29 assignment

"1. Find the smallest missing element from a sorted array 
public class MyClass {
    public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		int a[] = {0,1,3,4,8,9,10,11,13};
		
		int missingNum = findMissingNum(a);
		System.out.println(missingNum);
				
		}

	private static int findMissingNum(int[] a) {
		
		int start = 0;
		int end = a.length-1;
		
		while(start<=end)
		{
			int mid = start + (end-start)/2;
			
			if(mid == 0)
			{
				return mid;
			}
			
			
			if(a[mid]!=mid && a[mid-1]==mid-1)
			{
				return mid;
			}
				else if(a[mid]==mid)
			{
				start = mid +1;
			}
			
			
			else
			{
				end = mid -1;
			}
		}
		return a.length;
	}
	

}

---------------------------------------------------------------------------------------------------------------------
2 Find the missing term in a sequence in logarithmic time"
public class Main
{
    
    public static int findMissingTerm(int[] nums)
    {
        
        int left = 0, right = nums.length - 1;
 
        
        int diff = (nums[nums.length - 1] - nums[0]) / nums.length;
 
        while (left <= right)
        {
            
            int mid = right - (right - left) / 2;
 
    
            if (mid + 1 < nums.length && nums[mid + 1] - nums[mid] != diff) {
                return nums[mid + 1] - diff;
            }
 
        
            if (mid - 1 >= 0 && nums[mid] - nums[mid - 1] != diff) {
                return nums[mid - 1] + diff;
            }
 
        
            if (nums[mid] - nums[0] != (mid - 0) * diff) {
                right = mid - 1;
            }
            else {
                left = mid + 1;
            }
        }
        return -1;
    }
 
    public static void main(String[] args)
    {
  int[] nums = { 5, 7, 9, 11, 15 };
 
        System.out.println("The missing term is " + findMissingTerm(nums));
    }
}
----------------------------------------------------------------------------------------------------------------------
march 30 Assignments
1. Finding Missing Number in an array binary search
public class MyClass {
    public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		int a[] = {0,1,3,4,8,9,10,11,13};
		
		int missingNum = findMissingNum(a);
		System.out.println(missingNum);
				
		}

	private static int findMissingNum(int[] a) {
		
		int start = 0;
		int end = a.length-1;
		
		while(start<=end)
		{
			int mid = start + (end-start)/2;
			
			if(mid == 0)
			{
				return mid;
			}
			
			
			if(a[mid]!=mid && a[mid-1]==mid-1)
			{
				return mid;
			}
				else if(a[mid]==mid)
			{
				start = mid +1;
			}
			
			
			else
			{
				end = mid -1;
			}
		}
		return a.length;
	}
	

}
------------------------------------------------------------------------------------------------------------
2  https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"
public class Solution {
public int[] twoSum(int[] numbers, int target) {
int[]a=new int[2];
int start=0,end=numbers.length-1;
while(start<end)
{
if(numbers[start]+numbers[end]==target)
{
return new int[]{start+1,end+1};

        }
        else  if(numbers[start]+numbers[end]>target)
        {
            end--;
        }
        else
            
        {
            start++;
        }
        
    }
    return new int[2];
    
}
}
------------------------------------------------------------------------------------------------------
march31 assignments
1 https://www.techiedelight.com/find-floor-ceil-number-sorted-array/"input-array-is-sorted/"
public class Main
{
    
    public static int getCeil(int[] nums, int x)
    {
        
        int left = 0, right = nums.length - 1;
 

        int ceil = -1;
 
        
        while (left <= right)
        {
    
            int mid = (left + right) / 2;
 
            
            if (nums[mid] == x) {
                return nums[mid];
            }
 
    
            else if (x < nums[mid])
            {
                ceil = nums[mid];
                right = mid - 1;
            }
           else {
                left = mid + 1;
            }
        }
 
        return ceil;
    }
 
    public static int getFloor(int[] nums, int x)
    {
        int left = 0, right = nums.length - 1;
 
    
        int floor = -1;
 
    
        while (left <= right)
        {
            
            int mid = (left + right) / 2;
 

            if (nums[mid] == x) {
                return nums[mid];
            }
 
        
            else if (x < nums[mid]) {
                right = mid - 1;
            }

            else {
                floor = nums[mid];
                left = mid + 1;
            }
        }
 return floor;
    }
 
    public static void main(String[] args)
    {
        int[] nums = { 1, 4, 6, 8, 9 };
 
        for (int i = 0; i <= 10; i++) {
            System.out.println("Number " + i + " â€”> ceil is " + getCeil(nums, i)
                    + ", floor is " + getFloor(nums, i));
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------

2 https://www.techiedelight.com/find-number-1s-sorted-binary-array/

public class{
    
    public static int getCeil(int[] nums, int x)
    {
    
        int left = 0, right = nums.length - 1;
 
        int ceil = -1;
 
        
        while (left <= right)
        {
            int mid = (left + right) / 2;
 
            if (nums[mid] == x) {
                return nums[mid];
            }
 

            else if (x < nums[mid])
            {
                ceil = nums[mid];
                right = mid - 1;
            }
 
        
            else {
                left = mid + 1;
            }
        }
 
        return ceil;
    }
 
    -----------------------------------------------------------------------------------------
APRIL 1
"Find the time complexity of the following algorithms

1.static void fun()
{
    int i, j;
    for (i = 1; i <= n; i++)------------n
        for (j = 1; j <= log(i); j++)-----------------logn
            System.out.printf(""GeeksforGeeks"");
}
nlogn

2.
for (i = 0; i < N; i++) {-------------n
    a = a + rand();-------------1*n
}
for (j = 0; j < M; j++) {----------------n
    b = b + rand();----------------1*n
}

n+1*n+1*n+n
2n+2n^2
n+n^2


3.
int a = 0;------------1ms
for (i = 0; i < N; i++) {--------------n
    for (j = N; j > i; j--) {--------------n
        a = a + i + j;----------------------n
    }
}
1+n+n+n
3n+1
n

4.
int i, j, k = 0;---------------------1ms
for (i = n / 2; i <= n; i++) {---------------------n
    for (j = 2; j <= n; j = j * 2) {-------------------------n+1
        k = k + n / 2;------------------------------n
    }
}
1+2n+n+1
2+3n
n

5.
int a = 0, i = N;----------------1ms
while (i > 0) {-----------------------1*n
    a += i;-----------------------------1*n
    i /= 2;-----------------------1*n
}
1+1*n+1*n+1*n
3+n^3
n^3


